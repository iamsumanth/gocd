/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var m                       = require('mithril');
var _                       = require('lodash');
var s                       = require('string-plus');
var f                       = require('helpers/form_helper');
var Modal                   = require('views/shared/new_modal');
var ComponentMixins         = require('helpers/mithril_component_mixins');
var ElasticProfiles         = require('models/elastic_profiles/elastic_profiles');
var PluginInfos             = require('models/pipeline_configs/plugin_infos');
var ElasticProfileWidget    = require('views/elastic_profiles/elastic_profile_widget');
var ElasticProfileModalBody = require('views/elastic_profiles/elastic_profile_modal_body');
require('jquery.textcomplete');

function showErrors(modal, ctrl, newProfile) {
  module.exports = function (errorMessageOrProfileWithErrors) {
    if (_.isString(errorMessageOrProfileWithErrors)) {
      modal.destroy();
      ctrl.message({type: 'alert', message: errorMessageOrProfileWithErrors});
    } else {
      ctrl.clearMessage();
      newProfile(errorMessageOrProfileWithErrors);
    }
  };
}

function showSuccess(modal, ctrl, message) {
  module.exports = function () {
    modal.destroy();
    ctrl.reloadPage();
    ctrl.message({
      type:    'success',
      message: message
    });
  };
}

var ElasticProfilesWidget = {
  controller: function () {
    var ctrl = this;
    ComponentMixins.ManagesCollection.call(this, {as: 'Profile'});
    ComponentMixins.HasViewModel.call(this);

    this.modal    = null;
    this.profiles = m.prop(new ElasticProfiles());

    this.message = m.prop({type: undefined, message: undefined});

    this.clearMessage = function () {
      this.message({});
    };

    this.reloadPage = function () {
      ElasticProfiles.all().then(function (profiles) {
        ctrl.profiles(profiles);
      }, function (message) {
        ctrl.message({type: 'alert', message: message});
      });
    };

    this.reloadPage();

    this.edit = function (profile) {
      var newProfile   = m.prop();
      var pluginInfo   = m.prop();
      var saveDisabled = m.prop(false);
      var errorMessage = m.prop();

      ctrl.clearMessage();

      var modal = new Modal({
        size:    'large',
        title:   'Edit profile ' + profile.id(),
        body:    (<ElasticProfileModalBody profile={newProfile}
                                           pluginInfo={pluginInfo}
                                           newProfile={false}
                                           errorMessage={errorMessage}
                                           saveDisabled={saveDisabled}/>),
        onclose: function () {
          modal.destroy();
        },
        buttons: function () {
          if (!newProfile()) {
            return [];
          }
          return [
            {
              text:     'Save',
              class:    'save primary',
              onclick:  function () {
                newProfile().update().then(showSuccess(modal, ctrl, 'The profile ' + newProfile().id() + ' was updated successfully.'), showErrors(modal, ctrl, newProfile));
              },
              disabled: saveDisabled
            }
          ];
        }
      });

      var showError = function (args) {
        var messages = _.chain(args).map(function (arg) {
          if (_.isString(arg)) {
            return s.terminateWithPeriod(arg);
          }
        }).compact().uniq().join(' ').value();

        errorMessage(messages);
      };

      var onFulfilled = function (args) {
        newProfile(args[0]);
        pluginInfo(args[1]);
        errorMessage(null);
      };

      modal.render();
      m.redraw(true);

      m.sync([ElasticProfiles.Profile.get(profile.id()), PluginInfos.PluginInfo.get(profile.pluginId())]).then(onFulfilled, showError);
    };

    this.add = function () {
      var newProfile    = m.prop(new ElasticProfiles.Profile({}));
      var newPluginInfo = m.prop(null);
      var saveDisabled  = m.prop(true);

      var modal = new Modal({
        size:    'large',
        title:   'Add a new profile',
        body:    (<ElasticProfileModalBody profile={newProfile}
                                           newProfile={true}
                                           pluginInfo={newPluginInfo}
                                           saveDisabled={saveDisabled}/>),
        onclose: function () {
          modal.destroy();
        },
        buttons: [
          {
            text:     'Save',
            class:    'save primary',
            onclick:  function () {
              newProfile().create().then(showSuccess(modal, ctrl, 'The profile ' + newProfile().id() + ' was created successfully.'), showErrors(modal, ctrl, newProfile));
            },
            disabled: saveDisabled
          }
        ]
      });
      modal.render();
    };

    var deleteInProgress = m.prop(false);

    var performDelete = function (modal, profile) {
      var onSuccess = function (message) {
        modal.destroy();
        ctrl.deleteVm(profile.id());
        ctrl.reloadPage();
        ctrl.message({type: 'success', message: message});
        deleteInProgress(false);
      };

      var onFailure = function (message) {
        modal.destroy();
        ctrl.message({type: 'alert', message: message});
        deleteInProgress(false);
      };

      deleteInProgress(true);
      m.redraw(true);
      profile.delete().then(onSuccess, onFailure);
    };

    this.deleteConfirm = function (profile) {
      var modal = new Modal({
        title:    'Are you sure?',
        body:     (<div>Are you sure you want to delete the profile <strong>{profile.id()}</strong>?</div>),
        oncancel: function () {
          modal.destroy();
        },
        buttons:  function () {
          return [
            {
              text:    'Delete',
              class:   deleteInProgress() ? 'delete-profile in-progress' : 'delete-profile',
              onclick: function () {
                performDelete(modal, profile);
              }
            }
          ];
        }
      });
      modal.render();
    };
  },

  view: function (ctrl) {
    var message;
    if (ctrl.message().message) {
      message = (
        <f.row>
          <f.callout type={ctrl.message().type}>
            {ctrl.message().message}

            <button class="close-button" aria-label="Dismiss alert" type="button"
                    onclick={ctrl.clearMessage.bind(ctrl)}>
              <span aria-hidden="true">&times;</span>
            </button>
          </f.callout>
        </f.row>
      );
    }

    return (
      <div>
        <div class="header-panel">
          <header class="page-header">
            <f.row>
              <f.column size={6}>
                <h1>Elastic Agent Profiles</h1>
              </f.column>

              <f.column size={6}>
                <f.button onclick={ctrl.add.bind(ctrl)} class="add-profile">
                  Add
                </f.button>
              </f.column>
            </f.row>
          </header>
        </div>


        <div class="elastic-profiles">
          {message}
          <f.row>

            {ctrl.profiles().mapProfiles(function (profile) {
              var pluginInfo = _.find(PluginInfos(), function (pi) {
                return pi.id() === profile.pluginId();
              });

              return (
                <ElasticProfileWidget
                  profile={profile}
                  pluginInfo={pluginInfo}
                  key={profile.id()}
                  vm={ctrl.vmState(profile.id())}
                  onEdit={ctrl.edit.bind(ctrl, profile)}
                  onDelete={ctrl.deleteConfirm.bind(ctrl, profile)}/>
              );
            })}
          </f.row>
        </div>
      </div>
    );
  }
};

module.exports = ElasticProfilesWidget;