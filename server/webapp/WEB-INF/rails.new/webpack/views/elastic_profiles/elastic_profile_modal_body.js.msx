/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var m               = require("mithril");
var _               = require('lodash');
var $               = require('jquery');
var f               = require('helpers/form_helper');
var PluginInfos     = require('models/pipeline_configs/plugin_infos');
var ElasticProfiles = require('models/elastic_profiles/elastic_profiles');
var AngularPlugin   = require('views/shared/angular_plugin');

var autoComplete = function (model, attrName, selectCb) {
  return function (elem, isInitialized, context) {
    if (isInitialized) {
      return;
    }

    var $inputElem = $($(elem).find("input[data-prop-name='" + attrName + "']"));
    var values     = _.map(PluginInfos(), function (pi) {
      return pi.id();
    });

    context.onunload = function () {
      $inputElem.textcomplete('destroy');
    };

    $inputElem.textcomplete([
      {
        match:   /([^\s].*)$/,
        index:   1, // use the second match in the regex to extract the search term
        search:  function (term, callback) {
          term = term.toLowerCase();
          callback($.map(values, function (word) {
            return word.toLowerCase().indexOf(term) >= 0 ? word : null;
          }));
        },
        replace: function (word) {
          return word;
        }
      }
    ], {
      zIndex: '10000'
    });

    $inputElem.on('textComplete:select', function () {
      model()[attrName]($inputElem.val());
      if (selectCb) {
        selectCb($inputElem.val());
      }
    });
  };
};

var ElasticProfileModalBody = {
  controller: function (args) {
    var setPluginInfo = function (pluginInfo) {
      args.pluginInfo(pluginInfo);
      args.saveDisabled(!pluginInfo);
    };

    this.selectPluginId = function () {
      var pluginInfo = _.find(PluginInfos(), function (pi) {
        return pi.id() === args.profile().pluginId();
      });

      setPluginInfo(pluginInfo);

      if (!pluginInfo) {
        return;
      }

      PluginInfos.PluginInfo.get(pluginInfo.id()).then(function (pluginInfo) {
        setPluginInfo(pluginInfo);
        var newProfile = new ElasticProfiles.Profile({id: args.profile().id(), pluginId: pluginInfo.id()});
        newProfile.etag(args.profile().etag());
        args.profile(newProfile);
      });
    };
  },

  view: function (ctrl, args) {
    var profileIdDisabledMessage;

    if (args.errorMessage && args.errorMessage()) {
      return (
        <f.alert>{args.errorMessage()}</f.alert>
      );
    }

    if (!args.profile()) {
      return (
        <div class="modal-spinner"/>
      );
    }

    if (!args.newProfile) {
      profileIdDisabledMessage = (<div>Editing of profile ID is disabled</div>);
    }

    return (
      <div>
        <f.row key="static-stuff" class="id-and-plugin-id-wrapper">
          <f.inputWithLabel model={args.profile()}
                            attrName="id"
                            validate="true"
                            isRequired="true"
                            disabled={!args.newProfile}
                            message={profileIdDisabledMessage}
                            label="Id"
                            key="profile-id"/>
          <f.inputWithLabel model={args.profile()}
                            key="plugin-id-autocomplete"
                            validate="true"
                            attrName="pluginId"
                            isRequired="true"
                            label="Plugin Id"
                            onChange={ctrl.selectPluginId.bind(ctrl)}
                            config={autoComplete(args.profile, 'pluginId', ctrl.selectPluginId.bind(ctrl))}
                            end="true"/>
        </f.row>

        <div class="row collapse">
          <AngularPlugin pluginInfo={args.pluginInfo}
                         configuration={args.profile().properties}
                         key={args.pluginInfo() ? args.pluginInfo().id() : 'no-plugin'}/>
        </div>
      </div>
    );
  }
};

module.exports = ElasticProfileModalBody;