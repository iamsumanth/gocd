/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var m                      = require('mithril');
var _                      = require('lodash');
var f                      = require('helpers/form_helper');
var TriStateCheckboxWidget = require('views/agents/tri_state_checkbox_widget');
var Environments           = require('models/agents/environments');

var EnvironmentsListWidget = {
  oninit: function (vnode) {
    var args = vnode.attrs;

    var _ctrl = {
      updateEnvironments: function (callback) {
        function hideEnvironmentsDropDown() {
          args.hideDropDown('environment');
        }

        hideEnvironmentsDropDown();

        var environmentsToBeAdded = _.filter(Environments.list, function (environment) {
          return environment.isChecked();
        }).map(function (environment) {
          return environment.name();
        });

        var environmentsToBeRemoved = _.filter(Environments.list, function (environment) {
          return !environment.isIndeterminate() && !environment.isChecked();
        }).map(function (environment) {
          return environment.name();
        });

        callback(environmentsToBeAdded, environmentsToBeRemoved);
      },

      closeDropdown: function () {
        args.dropDownReset(false);
      }
    };
    _.assign(this, _ctrl);

  },

  view: function (vnode) {

    var ctrl = vnode.state;
    var args = vnode.attrs;

    var isEnvironmentsEmpty      = _.isEmpty(Environments.list);
    var environmentDropDownClass = "agent-button-group-dropdown env-dropdown ";

    if (isEnvironmentsEmpty) {
      environmentDropDownClass = environmentDropDownClass + "empty";
    }

    return (
      <div class={environmentDropDownClass} onclick={ctrl.closeDropdown}>
        <ul class="resources-items">
          { _.map(Environments.list, function (environment, index) {
            return (<TriStateCheckboxWidget triStateCheckbox={environment} index={index} key={environment.name()}/>);
          })
          }
        </ul>

        {isEnvironmentsEmpty ? (<span class="no-environment">No environments are defined</span>) :
          <f.button
            onclick={ctrl.updateEnvironments.bind(ctrl, args.onEnvironmentsUpdate)}
            class="btn-apply"
            data-toggle="environments-list">
            Apply
          </f.button>
        }
      </div>
    );
  }
};

module.exports = EnvironmentsListWidget;
